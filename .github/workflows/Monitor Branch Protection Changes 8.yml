name: Monitor Branch Protection Changes 8
on:
  branch_protection_rule:
    types: [created, edited, deleted]
  schedule:
    - cron: '*/15 * * * *'
  workflow_dispatch:

jobs:
  check-branch-protection:
    runs-on: ubuntu-latest
    
    steps:
      - name: Check Branch Protection Rules
        id: check-rules
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ADMIN_PAT }}
          script: |
            const repo = context.repo;
            
            try {
              // Get repository info
              console.log('Getting repository info...');
              const repoInfo = await github.rest.repos.get({
                owner: repo.owner,
                repo: repo.repo
              });
              
              const defaultBranch = repoInfo.data.default_branch;
              console.log(`Default branch is: ${defaultBranch}`);
              
              // Get current protection rules
              console.log(`Checking protection rules for ${defaultBranch}...`);
              let currentRules;
              try {
                const protection = await github.rest.repos.getBranchProtection({
                  owner: repo.owner,
                  repo: repo.repo,
                  branch: defaultBranch
                });
                currentRules = protection.data;
                console.log('Current protection rules:', JSON.stringify(currentRules, null, 2));
              } catch (error) {
                if (error.status === 404) {
                  console.log('No branch protection rules found');
                  currentRules = null;
                } else {
                  throw error;
                }
              }
              
              // Get previous state from issues
              const previousIssues = await github.rest.issues.listForRepo({
                owner: repo.owner,
                repo: repo.repo,
                state: 'all',
                labels: 'branch-protection-state',
                per_page: 1,
                sort: 'created',
                direction: 'desc'
              });
              
              let previousRules = null;
              let changesDetected = false;
              let changeDescription = '';
              
              if (previousIssues.data.length > 0) {
                try {
                  previousRules = JSON.parse(previousIssues.data[0].body);
                } catch (e) {
                  console.log('Could not parse previous rules');
                }
                
                // Compare states
                const currentJSON = JSON.stringify(currentRules);
                const previousJSON = JSON.stringify(previousRules);
                
                if (currentJSON !== previousJSON) {
                  changesDetected = true;
                  console.log('Changes detected!');
                  console.log('Previous rules:', JSON.stringify(previousRules, null, 2));
                  
                  // Create change description
                  if (!previousRules && currentRules) {
                    changeDescription = 'Branch protection rules were added';
                  } else if (previousRules && !currentRules) {
                    changeDescription = 'Branch protection rules were removed';
                  } else {
                    changeDescription = 'Branch protection rules were modified';
                  }
                  
                  // Store new state
                  await github.rest.issues.create({
                    owner: repo.owner,
                    repo: repo.repo,
                    title: `Branch Protection State - ${new Date().toISOString()}`,
                    body: currentJSON,
                    labels: ['branch-protection-state']
                  });
                } else {
                  console.log('No changes detected');
                }
              } else {
                // First run - store initial state
                console.log('No previous state found. Storing initial state.');
                await github.rest.issues.create({
                  owner: repo.owner,
                  repo: repo.repo,
                  title: `Branch Protection State - ${new Date().toISOString()}`,
                  body: JSON.stringify(currentRules),
                  labels: ['branch-protection-state']
                });
              }
              
              core.setOutput('changes_detected', changesDetected.toString());
              core.setOutput('change_description', changeDescription);
              core.setOutput('current_rules', JSON.stringify(currentRules));
              core.setOutput('previous_rules', JSON.stringify(previousRules));
              
            } catch (error) {
              console.log('Error details:', error);
              core.setFailed(`Error: ${error.message}`);
            }

      - name: Send Slack Notification - Changes Detected
        if: steps.check-rules.outputs.changes_detected == 'true'
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: 'C081N38PHC5'
          payload: |
            {
              "text": "üö® Branch protection rules changed in ${{ github.repository }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "üö® *Branch protection rules changed!*\n\n*Repository:* ${{ github.repository }}\n*Changed by:* ${{ github.actor }}\n*Event:* ${{ github.event_name }}\n*Change:* ${{ steps.check-rules.outputs.change_description }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Previous Rules:*\n```${{ steps.check-rules.outputs.previous_rules }}```\n*Current Rules:*\n```${{ steps.check-rules.outputs.current_rules }}```"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Send Slack Notification - Error
        if: failure()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: 'C081N38PHC5'
          payload: |
            {
              "text": "‚ö†Ô∏è Error monitoring branch protection in ${{ github.repository }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "‚ö†Ô∏è *Error monitoring branch protection!*\n\n*Repository:* ${{ github.repository }}"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
